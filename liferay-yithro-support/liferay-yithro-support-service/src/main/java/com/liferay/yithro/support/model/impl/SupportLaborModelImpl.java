/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.yithro.support.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.yithro.support.model.SupportLabor;
import com.liferay.yithro.support.model.SupportLaborModel;
import com.liferay.yithro.support.model.SupportLaborSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the SupportLabor service. Represents a row in the &quot;Yithro_SupportLabor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>SupportLaborModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SupportLaborImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SupportLaborImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SupportLaborModelImpl
	extends BaseModelImpl<SupportLabor> implements SupportLaborModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a support labor model instance should use the <code>SupportLabor</code> interface instead.
	 */
	public static final String TABLE_NAME = "Yithro_SupportLabor";

	public static final Object[][] TABLE_COLUMNS = {
		{"supportLaborId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"timeZoneId", Types.VARCHAR}, {"sunOpen", Types.INTEGER},
		{"sunClose", Types.INTEGER}, {"monOpen", Types.INTEGER},
		{"monClose", Types.INTEGER}, {"tueOpen", Types.INTEGER},
		{"tueClose", Types.INTEGER}, {"wedOpen", Types.INTEGER},
		{"wedClose", Types.INTEGER}, {"thuOpen", Types.INTEGER},
		{"thuClose", Types.INTEGER}, {"friOpen", Types.INTEGER},
		{"friClose", Types.INTEGER}, {"satOpen", Types.INTEGER},
		{"satClose", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("supportLaborId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timeZoneId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sunOpen", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sunClose", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("monOpen", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("monClose", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("tueOpen", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("tueClose", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("wedOpen", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("wedClose", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("thuOpen", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("thuClose", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("friOpen", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("friClose", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("satOpen", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("satClose", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Yithro_SupportLabor (supportLaborId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,name VARCHAR(75) null,description STRING null,timeZoneId VARCHAR(75) null,sunOpen INTEGER,sunClose INTEGER,monOpen INTEGER,monClose INTEGER,tueOpen INTEGER,tueClose INTEGER,wedOpen INTEGER,wedClose INTEGER,thuOpen INTEGER,thuClose INTEGER,friOpen INTEGER,friClose INTEGER,satOpen INTEGER,satClose INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table Yithro_SupportLabor";

	public static final String ORDER_BY_JPQL =
		" ORDER BY supportLabor.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Yithro_SupportLabor.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SupportLabor toModel(SupportLaborSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SupportLabor model = new SupportLaborImpl();

		model.setSupportLaborId(soapModel.getSupportLaborId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setTimeZoneId(soapModel.getTimeZoneId());
		model.setSunOpen(soapModel.getSunOpen());
		model.setSunClose(soapModel.getSunClose());
		model.setMonOpen(soapModel.getMonOpen());
		model.setMonClose(soapModel.getMonClose());
		model.setTueOpen(soapModel.getTueOpen());
		model.setTueClose(soapModel.getTueClose());
		model.setWedOpen(soapModel.getWedOpen());
		model.setWedClose(soapModel.getWedClose());
		model.setThuOpen(soapModel.getThuOpen());
		model.setThuClose(soapModel.getThuClose());
		model.setFriOpen(soapModel.getFriOpen());
		model.setFriClose(soapModel.getFriClose());
		model.setSatOpen(soapModel.getSatOpen());
		model.setSatClose(soapModel.getSatClose());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SupportLabor> toModels(SupportLaborSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SupportLabor> models = new ArrayList<SupportLabor>(
			soapModels.length);

		for (SupportLaborSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public SupportLaborModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _supportLaborId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSupportLaborId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _supportLaborId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SupportLabor.class;
	}

	@Override
	public String getModelClassName() {
		return SupportLabor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SupportLabor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SupportLabor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SupportLabor, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SupportLabor)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SupportLabor, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SupportLabor, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SupportLabor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SupportLabor, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SupportLabor, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<SupportLabor, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SupportLabor, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SupportLabor, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<SupportLabor, Object>>();
		Map<String, BiConsumer<SupportLabor, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SupportLabor, ?>>();

		attributeGetterFunctions.put(
			"supportLaborId", SupportLabor::getSupportLaborId);
		attributeSetterBiConsumers.put(
			"supportLaborId",
			(BiConsumer<SupportLabor, Long>)SupportLabor::setSupportLaborId);
		attributeGetterFunctions.put("companyId", SupportLabor::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<SupportLabor, Long>)SupportLabor::setCompanyId);
		attributeGetterFunctions.put("userId", SupportLabor::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<SupportLabor, Long>)SupportLabor::setUserId);
		attributeGetterFunctions.put("userName", SupportLabor::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<SupportLabor, String>)SupportLabor::setUserName);
		attributeGetterFunctions.put("name", SupportLabor::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<SupportLabor, String>)SupportLabor::setName);
		attributeGetterFunctions.put(
			"description", SupportLabor::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<SupportLabor, String>)SupportLabor::setDescription);
		attributeGetterFunctions.put("timeZoneId", SupportLabor::getTimeZoneId);
		attributeSetterBiConsumers.put(
			"timeZoneId",
			(BiConsumer<SupportLabor, String>)SupportLabor::setTimeZoneId);
		attributeGetterFunctions.put("sunOpen", SupportLabor::getSunOpen);
		attributeSetterBiConsumers.put(
			"sunOpen",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setSunOpen);
		attributeGetterFunctions.put("sunClose", SupportLabor::getSunClose);
		attributeSetterBiConsumers.put(
			"sunClose",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setSunClose);
		attributeGetterFunctions.put("monOpen", SupportLabor::getMonOpen);
		attributeSetterBiConsumers.put(
			"monOpen",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setMonOpen);
		attributeGetterFunctions.put("monClose", SupportLabor::getMonClose);
		attributeSetterBiConsumers.put(
			"monClose",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setMonClose);
		attributeGetterFunctions.put("tueOpen", SupportLabor::getTueOpen);
		attributeSetterBiConsumers.put(
			"tueOpen",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setTueOpen);
		attributeGetterFunctions.put("tueClose", SupportLabor::getTueClose);
		attributeSetterBiConsumers.put(
			"tueClose",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setTueClose);
		attributeGetterFunctions.put("wedOpen", SupportLabor::getWedOpen);
		attributeSetterBiConsumers.put(
			"wedOpen",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setWedOpen);
		attributeGetterFunctions.put("wedClose", SupportLabor::getWedClose);
		attributeSetterBiConsumers.put(
			"wedClose",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setWedClose);
		attributeGetterFunctions.put("thuOpen", SupportLabor::getThuOpen);
		attributeSetterBiConsumers.put(
			"thuOpen",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setThuOpen);
		attributeGetterFunctions.put("thuClose", SupportLabor::getThuClose);
		attributeSetterBiConsumers.put(
			"thuClose",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setThuClose);
		attributeGetterFunctions.put("friOpen", SupportLabor::getFriOpen);
		attributeSetterBiConsumers.put(
			"friOpen",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setFriOpen);
		attributeGetterFunctions.put("friClose", SupportLabor::getFriClose);
		attributeSetterBiConsumers.put(
			"friClose",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setFriClose);
		attributeGetterFunctions.put("satOpen", SupportLabor::getSatOpen);
		attributeSetterBiConsumers.put(
			"satOpen",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setSatOpen);
		attributeGetterFunctions.put("satClose", SupportLabor::getSatClose);
		attributeSetterBiConsumers.put(
			"satClose",
			(BiConsumer<SupportLabor, Integer>)SupportLabor::setSatClose);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSupportLaborId() {
		return _supportLaborId;
	}

	@Override
	public void setSupportLaborId(long supportLaborId) {
		_supportLaborId = supportLaborId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getTimeZoneId() {
		if (_timeZoneId == null) {
			return "";
		}
		else {
			return _timeZoneId;
		}
	}

	@Override
	public void setTimeZoneId(String timeZoneId) {
		_timeZoneId = timeZoneId;
	}

	@JSON
	@Override
	public int getSunOpen() {
		return _sunOpen;
	}

	@Override
	public void setSunOpen(int sunOpen) {
		_sunOpen = sunOpen;
	}

	@JSON
	@Override
	public int getSunClose() {
		return _sunClose;
	}

	@Override
	public void setSunClose(int sunClose) {
		_sunClose = sunClose;
	}

	@JSON
	@Override
	public int getMonOpen() {
		return _monOpen;
	}

	@Override
	public void setMonOpen(int monOpen) {
		_monOpen = monOpen;
	}

	@JSON
	@Override
	public int getMonClose() {
		return _monClose;
	}

	@Override
	public void setMonClose(int monClose) {
		_monClose = monClose;
	}

	@JSON
	@Override
	public int getTueOpen() {
		return _tueOpen;
	}

	@Override
	public void setTueOpen(int tueOpen) {
		_tueOpen = tueOpen;
	}

	@JSON
	@Override
	public int getTueClose() {
		return _tueClose;
	}

	@Override
	public void setTueClose(int tueClose) {
		_tueClose = tueClose;
	}

	@JSON
	@Override
	public int getWedOpen() {
		return _wedOpen;
	}

	@Override
	public void setWedOpen(int wedOpen) {
		_wedOpen = wedOpen;
	}

	@JSON
	@Override
	public int getWedClose() {
		return _wedClose;
	}

	@Override
	public void setWedClose(int wedClose) {
		_wedClose = wedClose;
	}

	@JSON
	@Override
	public int getThuOpen() {
		return _thuOpen;
	}

	@Override
	public void setThuOpen(int thuOpen) {
		_thuOpen = thuOpen;
	}

	@JSON
	@Override
	public int getThuClose() {
		return _thuClose;
	}

	@Override
	public void setThuClose(int thuClose) {
		_thuClose = thuClose;
	}

	@JSON
	@Override
	public int getFriOpen() {
		return _friOpen;
	}

	@Override
	public void setFriOpen(int friOpen) {
		_friOpen = friOpen;
	}

	@JSON
	@Override
	public int getFriClose() {
		return _friClose;
	}

	@Override
	public void setFriClose(int friClose) {
		_friClose = friClose;
	}

	@JSON
	@Override
	public int getSatOpen() {
		return _satOpen;
	}

	@Override
	public void setSatOpen(int satOpen) {
		_satOpen = satOpen;
	}

	@JSON
	@Override
	public int getSatClose() {
		return _satClose;
	}

	@Override
	public void setSatClose(int satClose) {
		_satClose = satClose;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SupportLabor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SupportLabor toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SupportLabor)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SupportLaborImpl supportLaborImpl = new SupportLaborImpl();

		supportLaborImpl.setSupportLaborId(getSupportLaborId());
		supportLaborImpl.setCompanyId(getCompanyId());
		supportLaborImpl.setUserId(getUserId());
		supportLaborImpl.setUserName(getUserName());
		supportLaborImpl.setName(getName());
		supportLaborImpl.setDescription(getDescription());
		supportLaborImpl.setTimeZoneId(getTimeZoneId());
		supportLaborImpl.setSunOpen(getSunOpen());
		supportLaborImpl.setSunClose(getSunClose());
		supportLaborImpl.setMonOpen(getMonOpen());
		supportLaborImpl.setMonClose(getMonClose());
		supportLaborImpl.setTueOpen(getTueOpen());
		supportLaborImpl.setTueClose(getTueClose());
		supportLaborImpl.setWedOpen(getWedOpen());
		supportLaborImpl.setWedClose(getWedClose());
		supportLaborImpl.setThuOpen(getThuOpen());
		supportLaborImpl.setThuClose(getThuClose());
		supportLaborImpl.setFriOpen(getFriOpen());
		supportLaborImpl.setFriClose(getFriClose());
		supportLaborImpl.setSatOpen(getSatOpen());
		supportLaborImpl.setSatClose(getSatClose());

		supportLaborImpl.resetOriginalValues();

		return supportLaborImpl;
	}

	@Override
	public int compareTo(SupportLabor supportLabor) {
		int value = 0;

		value = getName().compareTo(supportLabor.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SupportLabor)) {
			return false;
		}

		SupportLabor supportLabor = (SupportLabor)obj;

		long primaryKey = supportLabor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SupportLabor> toCacheModel() {
		SupportLaborCacheModel supportLaborCacheModel =
			new SupportLaborCacheModel();

		supportLaborCacheModel.supportLaborId = getSupportLaborId();

		supportLaborCacheModel.companyId = getCompanyId();

		supportLaborCacheModel.userId = getUserId();

		supportLaborCacheModel.userName = getUserName();

		String userName = supportLaborCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			supportLaborCacheModel.userName = null;
		}

		supportLaborCacheModel.name = getName();

		String name = supportLaborCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			supportLaborCacheModel.name = null;
		}

		supportLaborCacheModel.description = getDescription();

		String description = supportLaborCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			supportLaborCacheModel.description = null;
		}

		supportLaborCacheModel.timeZoneId = getTimeZoneId();

		String timeZoneId = supportLaborCacheModel.timeZoneId;

		if ((timeZoneId != null) && (timeZoneId.length() == 0)) {
			supportLaborCacheModel.timeZoneId = null;
		}

		supportLaborCacheModel.sunOpen = getSunOpen();

		supportLaborCacheModel.sunClose = getSunClose();

		supportLaborCacheModel.monOpen = getMonOpen();

		supportLaborCacheModel.monClose = getMonClose();

		supportLaborCacheModel.tueOpen = getTueOpen();

		supportLaborCacheModel.tueClose = getTueClose();

		supportLaborCacheModel.wedOpen = getWedOpen();

		supportLaborCacheModel.wedClose = getWedClose();

		supportLaborCacheModel.thuOpen = getThuOpen();

		supportLaborCacheModel.thuClose = getThuClose();

		supportLaborCacheModel.friOpen = getFriOpen();

		supportLaborCacheModel.friClose = getFriClose();

		supportLaborCacheModel.satOpen = getSatOpen();

		supportLaborCacheModel.satClose = getSatClose();

		return supportLaborCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SupportLabor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SupportLabor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SupportLabor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((SupportLabor)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SupportLabor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SupportLabor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SupportLabor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((SupportLabor)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		SupportLabor.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		SupportLabor.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _supportLaborId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private String _name;
	private String _description;
	private String _timeZoneId;
	private int _sunOpen;
	private int _sunClose;
	private int _monOpen;
	private int _monClose;
	private int _tueOpen;
	private int _tueClose;
	private int _wedOpen;
	private int _wedClose;
	private int _thuOpen;
	private int _thuClose;
	private int _friOpen;
	private int _friClose;
	private int _satOpen;
	private int _satClose;
	private SupportLabor _escapedModel;

}