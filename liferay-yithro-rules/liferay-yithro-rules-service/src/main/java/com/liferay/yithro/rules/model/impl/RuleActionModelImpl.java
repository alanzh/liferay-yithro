/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.yithro.rules.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.yithro.rules.model.RuleAction;
import com.liferay.yithro.rules.model.RuleActionModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RuleAction service. Represents a row in the &quot;Yithro_RuleAction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>RuleActionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RuleActionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RuleActionImpl
 * @generated
 */
public class RuleActionModelImpl
	extends BaseModelImpl<RuleAction> implements RuleActionModel {

	/**
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rule action model instance should use the <code>RuleAction</code> interface instead.
	 */
	public static final String TABLE_NAME = "Yithro_RuleAction";

	public static final Object[][] TABLE_COLUMNS = {
		{"ruleActionId", Types.BIGINT}, {"ruleId", Types.BIGINT},
		{"actionClassName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ruleActionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ruleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actionClassName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Yithro_RuleAction (ruleActionId LONG not null primary key,ruleId LONG,actionClassName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Yithro_RuleAction";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ruleAction.ruleActionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Yithro_RuleAction.ruleActionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long RULEID_COLUMN_BITMASK = 1L;

	public static final long RULEACTIONID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public RuleActionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ruleActionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRuleActionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ruleActionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RuleAction.class;
	}

	@Override
	public String getModelClassName() {
		return RuleAction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RuleAction, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RuleAction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RuleAction, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((RuleAction)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RuleAction, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RuleAction, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RuleAction)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RuleAction, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RuleAction, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, RuleAction>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			RuleAction.class.getClassLoader(), RuleAction.class,
			ModelWrapper.class);

		try {
			Constructor<RuleAction> constructor =
				(Constructor<RuleAction>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<RuleAction, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RuleAction, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RuleAction, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<RuleAction, Object>>();
		Map<String, BiConsumer<RuleAction, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RuleAction, ?>>();

		attributeGetterFunctions.put(
			"ruleActionId", RuleAction::getRuleActionId);
		attributeSetterBiConsumers.put(
			"ruleActionId",
			(BiConsumer<RuleAction, Long>)RuleAction::setRuleActionId);
		attributeGetterFunctions.put("ruleId", RuleAction::getRuleId);
		attributeSetterBiConsumers.put(
			"ruleId", (BiConsumer<RuleAction, Long>)RuleAction::setRuleId);
		attributeGetterFunctions.put(
			"actionClassName", RuleAction::getActionClassName);
		attributeSetterBiConsumers.put(
			"actionClassName",
			(BiConsumer<RuleAction, String>)RuleAction::setActionClassName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getRuleActionId() {
		return _ruleActionId;
	}

	@Override
	public void setRuleActionId(long ruleActionId) {
		_ruleActionId = ruleActionId;
	}

	@Override
	public long getRuleId() {
		return _ruleId;
	}

	@Override
	public void setRuleId(long ruleId) {
		_columnBitmask |= RULEID_COLUMN_BITMASK;

		if (!_setOriginalRuleId) {
			_setOriginalRuleId = true;

			_originalRuleId = _ruleId;
		}

		_ruleId = ruleId;
	}

	public long getOriginalRuleId() {
		return _originalRuleId;
	}

	@Override
	public String getActionClassName() {
		if (_actionClassName == null) {
			return "";
		}
		else {
			return _actionClassName;
		}
	}

	@Override
	public void setActionClassName(String actionClassName) {
		_actionClassName = actionClassName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RuleAction.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RuleAction toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RuleAction>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RuleActionImpl ruleActionImpl = new RuleActionImpl();

		ruleActionImpl.setRuleActionId(getRuleActionId());
		ruleActionImpl.setRuleId(getRuleId());
		ruleActionImpl.setActionClassName(getActionClassName());

		ruleActionImpl.resetOriginalValues();

		return ruleActionImpl;
	}

	@Override
	public int compareTo(RuleAction ruleAction) {
		long primaryKey = ruleAction.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RuleAction)) {
			return false;
		}

		RuleAction ruleAction = (RuleAction)obj;

		long primaryKey = ruleAction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		RuleActionModelImpl ruleActionModelImpl = this;

		ruleActionModelImpl._originalRuleId = ruleActionModelImpl._ruleId;

		ruleActionModelImpl._setOriginalRuleId = false;

		ruleActionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RuleAction> toCacheModel() {
		RuleActionCacheModel ruleActionCacheModel = new RuleActionCacheModel();

		ruleActionCacheModel.ruleActionId = getRuleActionId();

		ruleActionCacheModel.ruleId = getRuleId();

		ruleActionCacheModel.actionClassName = getActionClassName();

		String actionClassName = ruleActionCacheModel.actionClassName;

		if ((actionClassName != null) && (actionClassName.length() == 0)) {
			ruleActionCacheModel.actionClassName = null;
		}

		return ruleActionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RuleAction, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RuleAction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RuleAction, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RuleAction)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RuleAction, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RuleAction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RuleAction, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RuleAction)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RuleAction>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _ruleActionId;
	private long _ruleId;
	private long _originalRuleId;
	private boolean _setOriginalRuleId;
	private String _actionClassName;
	private long _columnBitmask;
	private RuleAction _escapedModel;

}