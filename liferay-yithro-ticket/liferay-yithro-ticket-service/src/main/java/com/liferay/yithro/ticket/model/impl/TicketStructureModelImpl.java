/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.yithro.ticket.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.yithro.ticket.model.TicketStructure;
import com.liferay.yithro.ticket.model.TicketStructureModel;
import com.liferay.yithro.ticket.model.TicketStructureSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the TicketStructure service. Represents a row in the &quot;Yithro_TicketStructure&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>TicketStructureModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TicketStructureImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TicketStructureImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TicketStructureModelImpl
	extends BaseModelImpl<TicketStructure> implements TicketStructureModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ticket structure model instance should use the <code>TicketStructure</code> interface instead.
	 */
	public static final String TABLE_NAME = "Yithro_TicketStructure";

	public static final Object[][] TABLE_COLUMNS = {
		{"ticketStructureId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"structure", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ticketStructureId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("structure", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Yithro_TicketStructure (ticketStructureId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null,structure VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Yithro_TicketStructure";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ticketStructure.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Yithro_TicketStructure.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TicketStructure toModel(TicketStructureSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TicketStructure model = new TicketStructureImpl();

		model.setTicketStructureId(soapModel.getTicketStructureId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setStructure(soapModel.getStructure());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TicketStructure> toModels(
		TicketStructureSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<TicketStructure> models = new ArrayList<TicketStructure>(
			soapModels.length);

		for (TicketStructureSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TicketStructureModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ticketStructureId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTicketStructureId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ticketStructureId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TicketStructure.class;
	}

	@Override
	public String getModelClassName() {
		return TicketStructure.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TicketStructure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TicketStructure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketStructure, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TicketStructure)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TicketStructure, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TicketStructure, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TicketStructure)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TicketStructure, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TicketStructure, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, TicketStructure>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			TicketStructure.class.getClassLoader(), TicketStructure.class,
			ModelWrapper.class);

		try {
			Constructor<TicketStructure> constructor =
				(Constructor<TicketStructure>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<TicketStructure, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TicketStructure, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TicketStructure, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<TicketStructure, Object>>();
		Map<String, BiConsumer<TicketStructure, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TicketStructure, ?>>();

		attributeGetterFunctions.put(
			"ticketStructureId", TicketStructure::getTicketStructureId);
		attributeSetterBiConsumers.put(
			"ticketStructureId",
			(BiConsumer<TicketStructure, Long>)
				TicketStructure::setTicketStructureId);
		attributeGetterFunctions.put(
			"companyId", TicketStructure::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TicketStructure, Long>)TicketStructure::setCompanyId);
		attributeGetterFunctions.put("userId", TicketStructure::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<TicketStructure, Long>)TicketStructure::setUserId);
		attributeGetterFunctions.put("userName", TicketStructure::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<TicketStructure, String>)TicketStructure::setUserName);
		attributeGetterFunctions.put(
			"createDate", TicketStructure::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TicketStructure, Date>)TicketStructure::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", TicketStructure::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<TicketStructure, Date>)
				TicketStructure::setModifiedDate);
		attributeGetterFunctions.put("name", TicketStructure::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<TicketStructure, String>)TicketStructure::setName);
		attributeGetterFunctions.put(
			"description", TicketStructure::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<TicketStructure, String>)
				TicketStructure::setDescription);
		attributeGetterFunctions.put(
			"structure", TicketStructure::getStructure);
		attributeSetterBiConsumers.put(
			"structure",
			(BiConsumer<TicketStructure, String>)TicketStructure::setStructure);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getTicketStructureId() {
		return _ticketStructureId;
	}

	@Override
	public void setTicketStructureId(long ticketStructureId) {
		_ticketStructureId = ticketStructureId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getStructure() {
		if (_structure == null) {
			return "";
		}
		else {
			return _structure;
		}
	}

	@Override
	public void setStructure(String structure) {
		_structure = structure;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TicketStructure.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TicketStructure toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TicketStructure>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TicketStructureImpl ticketStructureImpl = new TicketStructureImpl();

		ticketStructureImpl.setTicketStructureId(getTicketStructureId());
		ticketStructureImpl.setCompanyId(getCompanyId());
		ticketStructureImpl.setUserId(getUserId());
		ticketStructureImpl.setUserName(getUserName());
		ticketStructureImpl.setCreateDate(getCreateDate());
		ticketStructureImpl.setModifiedDate(getModifiedDate());
		ticketStructureImpl.setName(getName());
		ticketStructureImpl.setDescription(getDescription());
		ticketStructureImpl.setStructure(getStructure());

		ticketStructureImpl.resetOriginalValues();

		return ticketStructureImpl;
	}

	@Override
	public int compareTo(TicketStructure ticketStructure) {
		int value = 0;

		value = getName().compareTo(ticketStructure.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TicketStructure)) {
			return false;
		}

		TicketStructure ticketStructure = (TicketStructure)obj;

		long primaryKey = ticketStructure.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TicketStructureModelImpl ticketStructureModelImpl = this;

		ticketStructureModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<TicketStructure> toCacheModel() {
		TicketStructureCacheModel ticketStructureCacheModel =
			new TicketStructureCacheModel();

		ticketStructureCacheModel.ticketStructureId = getTicketStructureId();

		ticketStructureCacheModel.companyId = getCompanyId();

		ticketStructureCacheModel.userId = getUserId();

		ticketStructureCacheModel.userName = getUserName();

		String userName = ticketStructureCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ticketStructureCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ticketStructureCacheModel.createDate = createDate.getTime();
		}
		else {
			ticketStructureCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ticketStructureCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ticketStructureCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ticketStructureCacheModel.name = getName();

		String name = ticketStructureCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			ticketStructureCacheModel.name = null;
		}

		ticketStructureCacheModel.description = getDescription();

		String description = ticketStructureCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			ticketStructureCacheModel.description = null;
		}

		ticketStructureCacheModel.structure = getStructure();

		String structure = ticketStructureCacheModel.structure;

		if ((structure != null) && (structure.length() == 0)) {
			ticketStructureCacheModel.structure = null;
		}

		return ticketStructureCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TicketStructure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TicketStructure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketStructure, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((TicketStructure)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TicketStructure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TicketStructure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketStructure, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TicketStructure)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TicketStructure>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _ticketStructureId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _description;
	private String _structure;
	private TicketStructure _escapedModel;

}