/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.yithro.ticket.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.yithro.ticket.model.TicketAttachment;
import com.liferay.yithro.ticket.model.TicketAttachmentModel;
import com.liferay.yithro.ticket.model.TicketAttachmentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TicketAttachment service. Represents a row in the &quot;Yithro_TicketAttachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>TicketAttachmentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TicketAttachmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TicketAttachmentImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TicketAttachmentModelImpl
	extends BaseModelImpl<TicketAttachment> implements TicketAttachmentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ticket attachment model instance should use the <code>TicketAttachment</code> interface instead.
	 */
	public static final String TABLE_NAME = "Yithro_TicketAttachment";

	public static final Object[][] TABLE_COLUMNS = {
		{"ticketAttachmentId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"ticketEntryId", Types.BIGINT},
		{"ticketSolutionId", Types.BIGINT}, {"fileName", Types.VARCHAR},
		{"fileSize", Types.BIGINT}, {"visibility", Types.INTEGER},
		{"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ticketAttachmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ticketEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ticketSolutionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileSize", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("visibility", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Yithro_TicketAttachment (ticketAttachmentId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,ticketEntryId LONG,ticketSolutionId LONG,fileName VARCHAR(255) null,fileSize LONG,visibility INTEGER,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table Yithro_TicketAttachment";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ticketAttachment.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Yithro_TicketAttachment.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CREATEDATE_COLUMN_BITMASK = 1L;

	public static final long FILENAME_COLUMN_BITMASK = 2L;

	public static final long STATUS_COLUMN_BITMASK = 4L;

	public static final long TICKETENTRYID_COLUMN_BITMASK = 8L;

	public static final long TICKETSOLUTIONID_COLUMN_BITMASK = 16L;

	public static final long USERID_COLUMN_BITMASK = 32L;

	public static final long VISIBILITY_COLUMN_BITMASK = 64L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TicketAttachment toModel(TicketAttachmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TicketAttachment model = new TicketAttachmentImpl();

		model.setTicketAttachmentId(soapModel.getTicketAttachmentId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setTicketEntryId(soapModel.getTicketEntryId());
		model.setTicketSolutionId(soapModel.getTicketSolutionId());
		model.setFileName(soapModel.getFileName());
		model.setFileSize(soapModel.getFileSize());
		model.setVisibility(soapModel.getVisibility());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TicketAttachment> toModels(
		TicketAttachmentSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<TicketAttachment> models = new ArrayList<TicketAttachment>(
			soapModels.length);

		for (TicketAttachmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TicketAttachmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ticketAttachmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTicketAttachmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ticketAttachmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TicketAttachment.class;
	}

	@Override
	public String getModelClassName() {
		return TicketAttachment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TicketAttachment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TicketAttachment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketAttachment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TicketAttachment)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TicketAttachment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TicketAttachment, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TicketAttachment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TicketAttachment, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TicketAttachment, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TicketAttachment, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TicketAttachment, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TicketAttachment, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<TicketAttachment, Object>>();
		Map<String, BiConsumer<TicketAttachment, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<TicketAttachment, ?>>();

		attributeGetterFunctions.put(
			"ticketAttachmentId", TicketAttachment::getTicketAttachmentId);
		attributeSetterBiConsumers.put(
			"ticketAttachmentId",
			(BiConsumer<TicketAttachment, Long>)
				TicketAttachment::setTicketAttachmentId);
		attributeGetterFunctions.put(
			"companyId", TicketAttachment::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TicketAttachment, Long>)TicketAttachment::setCompanyId);
		attributeGetterFunctions.put("userId", TicketAttachment::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<TicketAttachment, Long>)TicketAttachment::setUserId);
		attributeGetterFunctions.put("userName", TicketAttachment::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<TicketAttachment, String>)
				TicketAttachment::setUserName);
		attributeGetterFunctions.put(
			"createDate", TicketAttachment::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TicketAttachment, Date>)
				TicketAttachment::setCreateDate);
		attributeGetterFunctions.put(
			"ticketEntryId", TicketAttachment::getTicketEntryId);
		attributeSetterBiConsumers.put(
			"ticketEntryId",
			(BiConsumer<TicketAttachment, Long>)
				TicketAttachment::setTicketEntryId);
		attributeGetterFunctions.put(
			"ticketSolutionId", TicketAttachment::getTicketSolutionId);
		attributeSetterBiConsumers.put(
			"ticketSolutionId",
			(BiConsumer<TicketAttachment, Long>)
				TicketAttachment::setTicketSolutionId);
		attributeGetterFunctions.put("fileName", TicketAttachment::getFileName);
		attributeSetterBiConsumers.put(
			"fileName",
			(BiConsumer<TicketAttachment, String>)
				TicketAttachment::setFileName);
		attributeGetterFunctions.put("fileSize", TicketAttachment::getFileSize);
		attributeSetterBiConsumers.put(
			"fileSize",
			(BiConsumer<TicketAttachment, Long>)TicketAttachment::setFileSize);
		attributeGetterFunctions.put(
			"visibility", TicketAttachment::getVisibility);
		attributeSetterBiConsumers.put(
			"visibility",
			(BiConsumer<TicketAttachment, Integer>)
				TicketAttachment::setVisibility);
		attributeGetterFunctions.put("status", TicketAttachment::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<TicketAttachment, Integer>)TicketAttachment::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getTicketAttachmentId() {
		return _ticketAttachmentId;
	}

	@Override
	public void setTicketAttachmentId(long ticketAttachmentId) {
		_ticketAttachmentId = ticketAttachmentId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		if (_originalCreateDate == null) {
			_originalCreateDate = _createDate;
		}

		_createDate = createDate;
	}

	public Date getOriginalCreateDate() {
		return _originalCreateDate;
	}

	@JSON
	@Override
	public long getTicketEntryId() {
		return _ticketEntryId;
	}

	@Override
	public void setTicketEntryId(long ticketEntryId) {
		_columnBitmask |= TICKETENTRYID_COLUMN_BITMASK;

		if (!_setOriginalTicketEntryId) {
			_setOriginalTicketEntryId = true;

			_originalTicketEntryId = _ticketEntryId;
		}

		_ticketEntryId = ticketEntryId;
	}

	public long getOriginalTicketEntryId() {
		return _originalTicketEntryId;
	}

	@JSON
	@Override
	public long getTicketSolutionId() {
		return _ticketSolutionId;
	}

	@Override
	public void setTicketSolutionId(long ticketSolutionId) {
		_columnBitmask |= TICKETSOLUTIONID_COLUMN_BITMASK;

		if (!_setOriginalTicketSolutionId) {
			_setOriginalTicketSolutionId = true;

			_originalTicketSolutionId = _ticketSolutionId;
		}

		_ticketSolutionId = ticketSolutionId;
	}

	public long getOriginalTicketSolutionId() {
		return _originalTicketSolutionId;
	}

	@JSON
	@Override
	public String getFileName() {
		if (_fileName == null) {
			return "";
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_columnBitmask |= FILENAME_COLUMN_BITMASK;

		if (_originalFileName == null) {
			_originalFileName = _fileName;
		}

		_fileName = fileName;
	}

	public String getOriginalFileName() {
		return GetterUtil.getString(_originalFileName);
	}

	@JSON
	@Override
	public long getFileSize() {
		return _fileSize;
	}

	@Override
	public void setFileSize(long fileSize) {
		_fileSize = fileSize;
	}

	@JSON
	@Override
	public int getVisibility() {
		return _visibility;
	}

	@Override
	public void setVisibility(int visibility) {
		_columnBitmask |= VISIBILITY_COLUMN_BITMASK;

		if (!_setOriginalVisibility) {
			_setOriginalVisibility = true;

			_originalVisibility = _visibility;
		}

		_visibility = visibility;
	}

	public int getOriginalVisibility() {
		return _originalVisibility;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TicketAttachment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TicketAttachment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TicketAttachment)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TicketAttachmentImpl ticketAttachmentImpl = new TicketAttachmentImpl();

		ticketAttachmentImpl.setTicketAttachmentId(getTicketAttachmentId());
		ticketAttachmentImpl.setCompanyId(getCompanyId());
		ticketAttachmentImpl.setUserId(getUserId());
		ticketAttachmentImpl.setUserName(getUserName());
		ticketAttachmentImpl.setCreateDate(getCreateDate());
		ticketAttachmentImpl.setTicketEntryId(getTicketEntryId());
		ticketAttachmentImpl.setTicketSolutionId(getTicketSolutionId());
		ticketAttachmentImpl.setFileName(getFileName());
		ticketAttachmentImpl.setFileSize(getFileSize());
		ticketAttachmentImpl.setVisibility(getVisibility());
		ticketAttachmentImpl.setStatus(getStatus());

		ticketAttachmentImpl.resetOriginalValues();

		return ticketAttachmentImpl;
	}

	@Override
	public int compareTo(TicketAttachment ticketAttachment) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ticketAttachment.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TicketAttachment)) {
			return false;
		}

		TicketAttachment ticketAttachment = (TicketAttachment)obj;

		long primaryKey = ticketAttachment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TicketAttachmentModelImpl ticketAttachmentModelImpl = this;

		ticketAttachmentModelImpl._originalUserId =
			ticketAttachmentModelImpl._userId;

		ticketAttachmentModelImpl._setOriginalUserId = false;

		ticketAttachmentModelImpl._originalCreateDate =
			ticketAttachmentModelImpl._createDate;

		ticketAttachmentModelImpl._originalTicketEntryId =
			ticketAttachmentModelImpl._ticketEntryId;

		ticketAttachmentModelImpl._setOriginalTicketEntryId = false;

		ticketAttachmentModelImpl._originalTicketSolutionId =
			ticketAttachmentModelImpl._ticketSolutionId;

		ticketAttachmentModelImpl._setOriginalTicketSolutionId = false;

		ticketAttachmentModelImpl._originalFileName =
			ticketAttachmentModelImpl._fileName;

		ticketAttachmentModelImpl._originalVisibility =
			ticketAttachmentModelImpl._visibility;

		ticketAttachmentModelImpl._setOriginalVisibility = false;

		ticketAttachmentModelImpl._originalStatus =
			ticketAttachmentModelImpl._status;

		ticketAttachmentModelImpl._setOriginalStatus = false;

		ticketAttachmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TicketAttachment> toCacheModel() {
		TicketAttachmentCacheModel ticketAttachmentCacheModel =
			new TicketAttachmentCacheModel();

		ticketAttachmentCacheModel.ticketAttachmentId = getTicketAttachmentId();

		ticketAttachmentCacheModel.companyId = getCompanyId();

		ticketAttachmentCacheModel.userId = getUserId();

		ticketAttachmentCacheModel.userName = getUserName();

		String userName = ticketAttachmentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ticketAttachmentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ticketAttachmentCacheModel.createDate = createDate.getTime();
		}
		else {
			ticketAttachmentCacheModel.createDate = Long.MIN_VALUE;
		}

		ticketAttachmentCacheModel.ticketEntryId = getTicketEntryId();

		ticketAttachmentCacheModel.ticketSolutionId = getTicketSolutionId();

		ticketAttachmentCacheModel.fileName = getFileName();

		String fileName = ticketAttachmentCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			ticketAttachmentCacheModel.fileName = null;
		}

		ticketAttachmentCacheModel.fileSize = getFileSize();

		ticketAttachmentCacheModel.visibility = getVisibility();

		ticketAttachmentCacheModel.status = getStatus();

		return ticketAttachmentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TicketAttachment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TicketAttachment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketAttachment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((TicketAttachment)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TicketAttachment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TicketAttachment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketAttachment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TicketAttachment)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		TicketAttachment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		TicketAttachment.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _ticketAttachmentId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _originalCreateDate;
	private long _ticketEntryId;
	private long _originalTicketEntryId;
	private boolean _setOriginalTicketEntryId;
	private long _ticketSolutionId;
	private long _originalTicketSolutionId;
	private boolean _setOriginalTicketSolutionId;
	private String _fileName;
	private String _originalFileName;
	private long _fileSize;
	private int _visibility;
	private int _originalVisibility;
	private boolean _setOriginalVisibility;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private TicketAttachment _escapedModel;

}