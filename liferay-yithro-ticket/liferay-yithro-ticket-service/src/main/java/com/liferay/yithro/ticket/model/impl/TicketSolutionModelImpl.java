/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.yithro.ticket.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.yithro.ticket.model.TicketSolution;
import com.liferay.yithro.ticket.model.TicketSolutionModel;
import com.liferay.yithro.ticket.model.TicketSolutionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TicketSolution service. Represents a row in the &quot;Yithro_TicketSolution&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>TicketSolutionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TicketSolutionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TicketSolutionImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TicketSolutionModelImpl
	extends BaseModelImpl<TicketSolution> implements TicketSolutionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ticket solution model instance should use the <code>TicketSolution</code> interface instead.
	 */
	public static final String TABLE_NAME = "Yithro_TicketSolution";

	public static final Object[][] TABLE_COLUMNS = {
		{"ticketSolutionId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"ticketEntryId", Types.BIGINT}, {"solution", Types.VARCHAR},
		{"type_", Types.INTEGER}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"statusMessage", Types.VARCHAR},
		{"statusReason", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ticketSolutionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ticketEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("solution", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("statusMessage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusReason", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Yithro_TicketSolution (ticketSolutionId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,ticketEntryId LONG,solution STRING null,type_ INTEGER,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,statusMessage TEXT null,statusReason INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table Yithro_TicketSolution";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ticketSolution.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Yithro_TicketSolution.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long TICKETENTRYID_COLUMN_BITMASK = 1L;

	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TicketSolution toModel(TicketSolutionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TicketSolution model = new TicketSolutionImpl();

		model.setTicketSolutionId(soapModel.getTicketSolutionId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setTicketEntryId(soapModel.getTicketEntryId());
		model.setSolution(soapModel.getSolution());
		model.setType(soapModel.getType());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setStatusMessage(soapModel.getStatusMessage());
		model.setStatusReason(soapModel.getStatusReason());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TicketSolution> toModels(
		TicketSolutionSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<TicketSolution> models = new ArrayList<TicketSolution>(
			soapModels.length);

		for (TicketSolutionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TicketSolutionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ticketSolutionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTicketSolutionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ticketSolutionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TicketSolution.class;
	}

	@Override
	public String getModelClassName() {
		return TicketSolution.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TicketSolution, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TicketSolution, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketSolution, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TicketSolution)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TicketSolution, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TicketSolution, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TicketSolution)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TicketSolution, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TicketSolution, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TicketSolution, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TicketSolution, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TicketSolution, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TicketSolution, Object>>();
		Map<String, BiConsumer<TicketSolution, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TicketSolution, ?>>();

		attributeGetterFunctions.put(
			"ticketSolutionId", TicketSolution::getTicketSolutionId);
		attributeSetterBiConsumers.put(
			"ticketSolutionId",
			(BiConsumer<TicketSolution, Long>)
				TicketSolution::setTicketSolutionId);
		attributeGetterFunctions.put("userId", TicketSolution::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<TicketSolution, Long>)TicketSolution::setUserId);
		attributeGetterFunctions.put("userName", TicketSolution::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<TicketSolution, String>)TicketSolution::setUserName);
		attributeGetterFunctions.put(
			"createDate", TicketSolution::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TicketSolution, Date>)TicketSolution::setCreateDate);
		attributeGetterFunctions.put(
			"ticketEntryId", TicketSolution::getTicketEntryId);
		attributeSetterBiConsumers.put(
			"ticketEntryId",
			(BiConsumer<TicketSolution, Long>)TicketSolution::setTicketEntryId);
		attributeGetterFunctions.put("solution", TicketSolution::getSolution);
		attributeSetterBiConsumers.put(
			"solution",
			(BiConsumer<TicketSolution, String>)TicketSolution::setSolution);
		attributeGetterFunctions.put("type", TicketSolution::getType);
		attributeSetterBiConsumers.put(
			"type",
			(BiConsumer<TicketSolution, Integer>)TicketSolution::setType);
		attributeGetterFunctions.put("status", TicketSolution::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<TicketSolution, Integer>)TicketSolution::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", TicketSolution::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<TicketSolution, Long>)
				TicketSolution::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", TicketSolution::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<TicketSolution, String>)
				TicketSolution::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", TicketSolution::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<TicketSolution, Date>)TicketSolution::setStatusDate);
		attributeGetterFunctions.put(
			"statusMessage", TicketSolution::getStatusMessage);
		attributeSetterBiConsumers.put(
			"statusMessage",
			(BiConsumer<TicketSolution, String>)
				TicketSolution::setStatusMessage);
		attributeGetterFunctions.put(
			"statusReason", TicketSolution::getStatusReason);
		attributeSetterBiConsumers.put(
			"statusReason",
			(BiConsumer<TicketSolution, Integer>)
				TicketSolution::setStatusReason);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getTicketSolutionId() {
		return _ticketSolutionId;
	}

	@Override
	public void setTicketSolutionId(long ticketSolutionId) {
		_ticketSolutionId = ticketSolutionId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getTicketEntryId() {
		return _ticketEntryId;
	}

	@Override
	public void setTicketEntryId(long ticketEntryId) {
		_columnBitmask |= TICKETENTRYID_COLUMN_BITMASK;

		if (!_setOriginalTicketEntryId) {
			_setOriginalTicketEntryId = true;

			_originalTicketEntryId = _ticketEntryId;
		}

		_ticketEntryId = ticketEntryId;
	}

	public long getOriginalTicketEntryId() {
		return _originalTicketEntryId;
	}

	@JSON
	@Override
	public String getSolution() {
		if (_solution == null) {
			return "";
		}
		else {
			return _solution;
		}
	}

	@Override
	public void setSolution(String solution) {
		_solution = solution;
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_type = type;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getStatusMessage() {
		if (_statusMessage == null) {
			return "";
		}
		else {
			return _statusMessage;
		}
	}

	@Override
	public void setStatusMessage(String statusMessage) {
		_statusMessage = statusMessage;
	}

	@JSON
	@Override
	public int getStatusReason() {
		return _statusReason;
	}

	@Override
	public void setStatusReason(int statusReason) {
		_statusReason = statusReason;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TicketSolution.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TicketSolution toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TicketSolution)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TicketSolutionImpl ticketSolutionImpl = new TicketSolutionImpl();

		ticketSolutionImpl.setTicketSolutionId(getTicketSolutionId());
		ticketSolutionImpl.setUserId(getUserId());
		ticketSolutionImpl.setUserName(getUserName());
		ticketSolutionImpl.setCreateDate(getCreateDate());
		ticketSolutionImpl.setTicketEntryId(getTicketEntryId());
		ticketSolutionImpl.setSolution(getSolution());
		ticketSolutionImpl.setType(getType());
		ticketSolutionImpl.setStatus(getStatus());
		ticketSolutionImpl.setStatusByUserId(getStatusByUserId());
		ticketSolutionImpl.setStatusByUserName(getStatusByUserName());
		ticketSolutionImpl.setStatusDate(getStatusDate());
		ticketSolutionImpl.setStatusMessage(getStatusMessage());
		ticketSolutionImpl.setStatusReason(getStatusReason());

		ticketSolutionImpl.resetOriginalValues();

		return ticketSolutionImpl;
	}

	@Override
	public int compareTo(TicketSolution ticketSolution) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ticketSolution.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TicketSolution)) {
			return false;
		}

		TicketSolution ticketSolution = (TicketSolution)obj;

		long primaryKey = ticketSolution.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TicketSolutionModelImpl ticketSolutionModelImpl = this;

		ticketSolutionModelImpl._originalTicketEntryId =
			ticketSolutionModelImpl._ticketEntryId;

		ticketSolutionModelImpl._setOriginalTicketEntryId = false;

		ticketSolutionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TicketSolution> toCacheModel() {
		TicketSolutionCacheModel ticketSolutionCacheModel =
			new TicketSolutionCacheModel();

		ticketSolutionCacheModel.ticketSolutionId = getTicketSolutionId();

		ticketSolutionCacheModel.userId = getUserId();

		ticketSolutionCacheModel.userName = getUserName();

		String userName = ticketSolutionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ticketSolutionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ticketSolutionCacheModel.createDate = createDate.getTime();
		}
		else {
			ticketSolutionCacheModel.createDate = Long.MIN_VALUE;
		}

		ticketSolutionCacheModel.ticketEntryId = getTicketEntryId();

		ticketSolutionCacheModel.solution = getSolution();

		String solution = ticketSolutionCacheModel.solution;

		if ((solution != null) && (solution.length() == 0)) {
			ticketSolutionCacheModel.solution = null;
		}

		ticketSolutionCacheModel.type = getType();

		ticketSolutionCacheModel.status = getStatus();

		ticketSolutionCacheModel.statusByUserId = getStatusByUserId();

		ticketSolutionCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = ticketSolutionCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			ticketSolutionCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			ticketSolutionCacheModel.statusDate = statusDate.getTime();
		}
		else {
			ticketSolutionCacheModel.statusDate = Long.MIN_VALUE;
		}

		ticketSolutionCacheModel.statusMessage = getStatusMessage();

		String statusMessage = ticketSolutionCacheModel.statusMessage;

		if ((statusMessage != null) && (statusMessage.length() == 0)) {
			ticketSolutionCacheModel.statusMessage = null;
		}

		ticketSolutionCacheModel.statusReason = getStatusReason();

		return ticketSolutionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TicketSolution, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TicketSolution, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketSolution, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((TicketSolution)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TicketSolution, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TicketSolution, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketSolution, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TicketSolution)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		TicketSolution.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		TicketSolution.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _ticketSolutionId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private long _ticketEntryId;
	private long _originalTicketEntryId;
	private boolean _setOriginalTicketEntryId;
	private String _solution;
	private int _type;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _statusMessage;
	private int _statusReason;
	private long _columnBitmask;
	private TicketSolution _escapedModel;

}