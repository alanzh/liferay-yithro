/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.yithro.ticket.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.yithro.ticket.model.TicketFieldData;
import com.liferay.yithro.ticket.model.TicketFieldDataModel;
import com.liferay.yithro.ticket.model.TicketFieldDataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the TicketFieldData service. Represents a row in the &quot;Yithro_TicketFieldData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>TicketFieldDataModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TicketFieldDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TicketFieldDataImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TicketFieldDataModelImpl
	extends BaseModelImpl<TicketFieldData> implements TicketFieldDataModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ticket field data model instance should use the <code>TicketFieldData</code> interface instead.
	 */
	public static final String TABLE_NAME = "Yithro_TicketFieldData";

	public static final Object[][] TABLE_COLUMNS = {
		{"ticketFieldDataId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"ticketEntryId", Types.BIGINT}, {"ticketFieldId", Types.BIGINT},
		{"data_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ticketFieldDataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ticketEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ticketFieldId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Yithro_TicketFieldData (ticketFieldDataId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,ticketEntryId LONG,ticketFieldId LONG,data_ STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table Yithro_TicketFieldData";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ticketFieldData.ticketFieldDataId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Yithro_TicketFieldData.ticketFieldDataId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long TICKETENTRYID_COLUMN_BITMASK = 1L;

	public static final long TICKETFIELDID_COLUMN_BITMASK = 2L;

	public static final long TICKETFIELDDATAID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TicketFieldData toModel(TicketFieldDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TicketFieldData model = new TicketFieldDataImpl();

		model.setTicketFieldDataId(soapModel.getTicketFieldDataId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTicketEntryId(soapModel.getTicketEntryId());
		model.setTicketFieldId(soapModel.getTicketFieldId());
		model.setData(soapModel.getData());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TicketFieldData> toModels(
		TicketFieldDataSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<TicketFieldData> models = new ArrayList<TicketFieldData>(
			soapModels.length);

		for (TicketFieldDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TicketFieldDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ticketFieldDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTicketFieldDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ticketFieldDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TicketFieldData.class;
	}

	@Override
	public String getModelClassName() {
		return TicketFieldData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TicketFieldData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TicketFieldData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketFieldData, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TicketFieldData)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TicketFieldData, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TicketFieldData, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TicketFieldData)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TicketFieldData, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TicketFieldData, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TicketFieldData, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TicketFieldData, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TicketFieldData, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<TicketFieldData, Object>>();
		Map<String, BiConsumer<TicketFieldData, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TicketFieldData, ?>>();

		attributeGetterFunctions.put(
			"ticketFieldDataId", TicketFieldData::getTicketFieldDataId);
		attributeSetterBiConsumers.put(
			"ticketFieldDataId",
			(BiConsumer<TicketFieldData, Long>)
				TicketFieldData::setTicketFieldDataId);
		attributeGetterFunctions.put(
			"companyId", TicketFieldData::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TicketFieldData, Long>)TicketFieldData::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", TicketFieldData::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TicketFieldData, Date>)TicketFieldData::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", TicketFieldData::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<TicketFieldData, Date>)
				TicketFieldData::setModifiedDate);
		attributeGetterFunctions.put(
			"ticketEntryId", TicketFieldData::getTicketEntryId);
		attributeSetterBiConsumers.put(
			"ticketEntryId",
			(BiConsumer<TicketFieldData, Long>)
				TicketFieldData::setTicketEntryId);
		attributeGetterFunctions.put(
			"ticketFieldId", TicketFieldData::getTicketFieldId);
		attributeSetterBiConsumers.put(
			"ticketFieldId",
			(BiConsumer<TicketFieldData, Long>)
				TicketFieldData::setTicketFieldId);
		attributeGetterFunctions.put("data", TicketFieldData::getData);
		attributeSetterBiConsumers.put(
			"data",
			(BiConsumer<TicketFieldData, String>)TicketFieldData::setData);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getTicketFieldDataId() {
		return _ticketFieldDataId;
	}

	@Override
	public void setTicketFieldDataId(long ticketFieldDataId) {
		_ticketFieldDataId = ticketFieldDataId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getTicketEntryId() {
		return _ticketEntryId;
	}

	@Override
	public void setTicketEntryId(long ticketEntryId) {
		_columnBitmask |= TICKETENTRYID_COLUMN_BITMASK;

		if (!_setOriginalTicketEntryId) {
			_setOriginalTicketEntryId = true;

			_originalTicketEntryId = _ticketEntryId;
		}

		_ticketEntryId = ticketEntryId;
	}

	public long getOriginalTicketEntryId() {
		return _originalTicketEntryId;
	}

	@JSON
	@Override
	public long getTicketFieldId() {
		return _ticketFieldId;
	}

	@Override
	public void setTicketFieldId(long ticketFieldId) {
		_columnBitmask |= TICKETFIELDID_COLUMN_BITMASK;

		if (!_setOriginalTicketFieldId) {
			_setOriginalTicketFieldId = true;

			_originalTicketFieldId = _ticketFieldId;
		}

		_ticketFieldId = ticketFieldId;
	}

	public long getOriginalTicketFieldId() {
		return _originalTicketFieldId;
	}

	@JSON
	@Override
	public String getData() {
		if (_data == null) {
			return "";
		}
		else {
			return _data;
		}
	}

	@Override
	public void setData(String data) {
		_data = data;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TicketFieldData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TicketFieldData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TicketFieldData)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TicketFieldDataImpl ticketFieldDataImpl = new TicketFieldDataImpl();

		ticketFieldDataImpl.setTicketFieldDataId(getTicketFieldDataId());
		ticketFieldDataImpl.setCompanyId(getCompanyId());
		ticketFieldDataImpl.setCreateDate(getCreateDate());
		ticketFieldDataImpl.setModifiedDate(getModifiedDate());
		ticketFieldDataImpl.setTicketEntryId(getTicketEntryId());
		ticketFieldDataImpl.setTicketFieldId(getTicketFieldId());
		ticketFieldDataImpl.setData(getData());

		ticketFieldDataImpl.resetOriginalValues();

		return ticketFieldDataImpl;
	}

	@Override
	public int compareTo(TicketFieldData ticketFieldData) {
		long primaryKey = ticketFieldData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TicketFieldData)) {
			return false;
		}

		TicketFieldData ticketFieldData = (TicketFieldData)obj;

		long primaryKey = ticketFieldData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TicketFieldDataModelImpl ticketFieldDataModelImpl = this;

		ticketFieldDataModelImpl._setModifiedDate = false;

		ticketFieldDataModelImpl._originalTicketEntryId =
			ticketFieldDataModelImpl._ticketEntryId;

		ticketFieldDataModelImpl._setOriginalTicketEntryId = false;

		ticketFieldDataModelImpl._originalTicketFieldId =
			ticketFieldDataModelImpl._ticketFieldId;

		ticketFieldDataModelImpl._setOriginalTicketFieldId = false;

		ticketFieldDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TicketFieldData> toCacheModel() {
		TicketFieldDataCacheModel ticketFieldDataCacheModel =
			new TicketFieldDataCacheModel();

		ticketFieldDataCacheModel.ticketFieldDataId = getTicketFieldDataId();

		ticketFieldDataCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			ticketFieldDataCacheModel.createDate = createDate.getTime();
		}
		else {
			ticketFieldDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ticketFieldDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ticketFieldDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ticketFieldDataCacheModel.ticketEntryId = getTicketEntryId();

		ticketFieldDataCacheModel.ticketFieldId = getTicketFieldId();

		ticketFieldDataCacheModel.data = getData();

		String data = ticketFieldDataCacheModel.data;

		if ((data != null) && (data.length() == 0)) {
			ticketFieldDataCacheModel.data = null;
		}

		return ticketFieldDataCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TicketFieldData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TicketFieldData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketFieldData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((TicketFieldData)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TicketFieldData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TicketFieldData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TicketFieldData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TicketFieldData)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		TicketFieldData.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		TicketFieldData.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _ticketFieldDataId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _ticketEntryId;
	private long _originalTicketEntryId;
	private boolean _setOriginalTicketEntryId;
	private long _ticketFieldId;
	private long _originalTicketFieldId;
	private boolean _setOriginalTicketFieldId;
	private String _data;
	private long _columnBitmask;
	private TicketFieldData _escapedModel;

}